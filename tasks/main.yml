---
- name: include OS family/distribution specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
- name: install required dependencies
  package:
    name: "{{ item }}"
    state: "present"
  with_items: "{{ required_packages }}"
- name: install pip
  easy_install: 
    name: pip 
    state: latest
  when: ansible_pkg_mgr == 'yum'
- name: install ara
  pip: name={{ item }}
  with_items:
    - ara
- name: get ara install location
  shell: python -c "import os,ara; print(os.path.dirname(ara.__file__))"
  register: ara_location
- name: enable ara callback plugin
  blockinfile:
    dest: "{{ config_path }}"
    content: |
      [defaults]
      # callback_plugins configuration is required for the ARA callback
      callback_plugins = {{ ara_location.stdout }}/plugins/callbacks
- block:
   - name: create directory for ansible and ara
     file: 
       path: /var/www/ara 
       owner: apache 
       group: apache 
       state: directory 
       recurse: yes
   - name: create the ansible and ARA configuration 
     copy:
       src: files/ansible.cfg
       dest: /var/www/ara/ansible.cfg
   - name: copy ARAâ€™s WSGI script to the web directory
     shell: cp -p $(which ara-wsgi) /var/www/ara/
   - name: get status of selinux
     shell: getenforce
     register: selinux_status
   - name: set selinux boolean to allow apache to manage the files
     seboolean:
      name: httpd_unified
      state: yes
     when: selinux_status.stdout == "Enforcing"
   - name: apache configuration
     template: 
       src: templates/ara.conf.j2 
       dest: "{{ apache_config_path }}/ara.conf"
       owner: root 
       group: root 
       mode: 0644
   - name: a2ensite ara
     shell: a2ensite ara
     when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
   - name: Restart apache
     service:
       name: "{{ apache_service }}"
       state: "restarted"
       enabled: yes
  when: mod_wsgi | bool

- block:
   - name: copy systemd service template
     template: 
       src: templates/ara-service.conf.j2 
       dest: /etc/systemd/system/ara.service 
       owner: root 
       group: root 
       mode: 0644
   - name: daemon reload
     shell: systemctl daemon-reload
   - name: start and enable service
     service: 
       name: ara
       state: started 
       enabled: yes
  when: embedded_server | bool
